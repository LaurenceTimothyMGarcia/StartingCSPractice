Script started on 2021-02-18 12:22:38-08:00 [TERM="xterm" TTY="/dev/pts/9" COLUMNS="138" LINES="48"]
laurenceg@costello ~/cs1400/codingPractice $ pwd
/user/laurenceg/cs1400/codingPractice
laurenceg@costello ~/cs1400/codingPractice $ ls -l
total 31
-rw------- 1 laurenceg cpp  548 Feb 17 10:50 FormattedOutput.java
-rw------- 1 laurenceg cpp 1216 Feb  9 17:23 KeyboardInput.class
-rw------- 1 laurenceg cpp  875 Feb  9 15:18 KeyboardInput.java
-rw------- 1 laurenceg cpp 1112 Feb  9 17:24 NameAndInitials.class
-rw------- 1 laurenceg cpp  737 Feb  9 15:46 NameAndInitials.java
-rw------- 1 laurenceg cpp 1003 Feb  1 21:45 Pay.class
-rw-r--r-- 1 laurenceg cpp  980 Feb  1 21:32 Pay.java
-rw------- 1 laurenceg cpp 1416 Feb 17 11:13 StringComparison.java
-rw------- 1 laurenceg cpp 1202 Feb  9 17:24 VendingMachine.class
-rw------- 1 laurenceg cpp  919 Feb  9 17:18 VendingMachine.java
-rw------- 1 laurenceg cpp 2635 Feb  1 21:46 practice1.txt
-rw------- 1 laurenceg cpp 6955 Feb  9 17:25 practice2.txt
-rw------- 1 laurenceg cpp    0 Feb 18 12:22 practice3.txt
-rw------- 1 laurenceg cpp 1095 Feb 18 12:17 roots.java
laurenceg@costello ~/cs1400/codingPractice $ cat FormattedOutput.java
public class FormattedOutput
{
   public static void main(String[] args)
   {
      String student = "Name: ";
      String major = "Major: ";
      String list = "Study List: ";

      String name = "\"Laurence Garcia\"";
      String undeclared = "\\Undeclared\\";
      String studyList = "BIO '1110', CS '1400', and NTR '2280'";

      int space = studyList.length();

      System.out.printf("%-12s%s\n", student, name);
      System.out.printf("%-12s%s\n", major, undeclared);
      System.out.printf("%s%s\n", list, studyList);
   }
}
laurenceg@costello ~/cs1400/codingPractice $ javac FormattedOutput.java
laurenceg@costello ~/cs1400/codingPractice $ java FormattedOutput
Name:       "Laurence Garcia"
Major:      \Undeclared\
Study List: BIO '1110', CS '1400', and NTR '2280'
laurenceg@costello ~/cs1400/codingPractice $ cat StringComparison.java
import java.util.Scanner;

public class StringComparison
{
   public static void main(String[] args)
   {
      Scanner kb = new Scanner(System.in);

      String word1, word2, word3;
      String first, second, third;

      System.out.println("Please enter three strings: ");
      word1 = kb.nextLine();
      word2 = kb.nextLine();
      word3 = kb.nextLine();

      System.out.println("The inputs in sorted order are: ");
      if ((word1.compareTo(word2) < 0) && (word1.compareTo(word3) < 0))
      {
         first = word1;
         if (word2.compareTo(word3) < 0)
         {
            second = word2;
            third = word3;
         }
         else
         {
            second = word3;
            third = word2;
         }
      }
      else if (word2.compareTo(word3) < 0)
      {
         first = word2;
         if (word1.compareTo(word3) < 0)
         {
            second = word1;
            third = word3;
         }
         else
         {
            second = word3;
            third = word1;
         }
      }
      else
      {
         first = word3;
         if (word1.compareTo(word2) < 0)
         {
            second = word1;
            third = word2;
         }
         else
         {
            second = word2;
            third = word1;
         }
      }

      System.out.println(first);
      System.out.println(second);
      System.out.println(third);

   }
}
laurenceg@costello ~/cs1400/codingPractice $ javac StringComparison.java
laurenceg@costello ~/cs1400/codingPractice $ java StringComparison
Please enter three strings:
Zebra
Append
Brendan
The inputs in sorted order are:
Append
Brendan
Zebra
laurenceg@costello ~/cs1400/codingPractice $ cat roots.java
import java.util.Scanner;

public class roots
{
   public static void main(String[] args)
   {
      Scanner kb = new Scanner(System.in);

      int a, b, c;
      double root1, root2;
      double squareRoot;

      System.out.println("$java Roots");
      System.out.print("Enter the three coefficients: ");
      a = kb.nextInt();
      b = kb.nextInt();
      c = kb.nextInt();

      if (a == 0)
      {
         System.out.println("This is not a quadratic equation.");
      }
      else
      {
         squareRoot = Math.sqrt((Math.pow((double)(b), 2.0)) - (4*a*c));
         root1 = ((double)(-b) + squareRoot) / (double)(2*a);
         root2 = ((double)(-b) - squareRoot) / (double)(2*a);

         if (!(root1%1 == 0) || !(root2%1 == 0))
         {
            System.out.println("There are no real roots.");
         }
         else if (root1 == root2)
         {
            System.out.printf("The single root is %.4f.\n", root1);
         }
         else
         {
            System.out.printf("The two roots are %.4f and %.4f.\n", root1, root2);
         }
      }
   }
}
laurenceg@costello ~/cs1400/codingPractice $ javac roots.java
laurenceg@costello ~/cs1400/codingPractice $ java roots
$java Roots
Enter the three coefficients: 1 -1 -6
The two roots are 3.0000 and -2.0000.
laurenceg@costello ~/cs1400/codingPractice $ java roots
$java Roots
Enter the three coefficients: 1 2 1
The single root is -1.0000.
laurenceg@costello ~/cs1400/codingPractice $ java roots
$java Roots
Enter the three coefficients: 5 1 3
There are no real roots.
laurenceg@costello ~/cs1400/codingPractice $ java roots
$java Roots
Enter the three coefficients: 0 4 5
This is not a quadratic equation.
laurenceg@costello ~/cs1400/codingPractice $ exit
exit

Script done on 2021-02-18 12:25:02-08:00 [COMMAND_EXIT_CODE="0"]
